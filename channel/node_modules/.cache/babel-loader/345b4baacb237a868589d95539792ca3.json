{"ast":null,"code":"import _classCallCheck from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamCreate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamCreate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      //console.log({input});\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var touched = _ref2.touched,\n          error = _ref2.error;\n\n      //remember: these parameters are meta property\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          },\n          __self: this\n        }, error));\n      }\n    } // renderInput(formProps) {\n    //     //console.log(formProps);\n    //     return <input \n    //     onChange={formProps.input.onChange}\n    //     value={formProps.input.value} />\n    // }\n\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formInput) {\n      console.log(formInput);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit) //handleSubmit is one of the redux-form propertiess\n        ,\n        className: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  console.log(formValues);\n  var errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"you must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"you must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["D:\\Mini Projects\\streams\\channel\\src\\components\\streams\\StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","renderInput","input","label","meta","renderError","touched","error","formInput","console","log","props","handleSubmit","onSubmit","Component","validate","formValues","errors","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;IAEMC,Y;;;;;;;;;;;;;;;;;;UAmBEC,W,GAAc,gBAA4B;AAAA,UAAzBC,KAAyB,QAAzBA,KAAyB;AAAA,UAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,UAAXC,IAAW,QAAXA,IAAW;AACtC;AACA,aACA;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGiB,MAAKG,WAAL,CAAiBD,IAAjB,CAHjB,CADA;AAMF,K;;;;;;;uCAzBwB;AAAA,UAAjBE,OAAiB,SAAjBA,OAAiB;AAAA,UAARC,KAAQ,SAARA,KAAQ;;AAAE;AAC5B,UAAGD,OAAO,IAAIC,KAAd,EAAqB;AACjB,eACI;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBA,KAAzB,CADJ,CADJ;AAKH;AACJ,K,CAED;AACA;AACA;AACA;AACA;AACA;;;;6BAYSC,S,EAAW;AAEhBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACH;;;6BAEQ;AAEL,aACA;AACA,QAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CADV,CACkD;AADlD;AAEC,QAAA,SAAS,EAAC,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKZ,WAApC;AAAiD,QAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAII,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAKI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,CADA;AASH;;;;EA7CsBJ,KAAK,CAACiB,S;;AAgDjC,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,UAAD,EAAgB;AAC7BP,EAAAA,OAAO,CAACC,GAAR,CAAYM,UAAZ;AACA,MAAMC,MAAM,GAAG,EAAf;;AAEA,MAAG,CAACD,UAAU,CAACE,KAAf,EAAsB;AAClBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AAED,MAAG,CAACF,UAAU,CAACG,WAAf,EAA4B;AACxBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACH;;AAED,SAAOF,MAAP;AAGH,CAfD;;AAkBA,eAAelB,SAAS,CAAC;AACrBqB,EAAAA,IAAI,EAAE,cADe;AAErBL,EAAAA,QAAQ,EAAEA;AAFW,CAAD,CAAT,CAGZf,YAHY,CAAf","sourcesContent":["import React from \"react\";\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nclass StreamCreate extends React.Component {\r\n    \r\n    renderError({touched, error}) { //remember: these parameters are meta property\r\n        if(touched && error) {\r\n            return (\r\n                <div className=\"ui error message\">\r\n                    <div className=\"header\">{error}</div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    // renderInput(formProps) {\r\n    //     //console.log(formProps);\r\n    //     return <input \r\n    //     onChange={formProps.input.onChange}\r\n    //     value={formProps.input.value} />\r\n    // }\r\n\r\n        renderInput = ({ input, label, meta }) => {\r\n            //console.log({input});\r\n            return (\r\n            <div className=\"field\">\r\n                <label>{label}</label>\r\n                <input {...input} autoComplete=\"off\" />\r\n                            {this.renderError(meta)}\r\n            </div>\r\n        )}\r\n    \r\n    onSubmit(formInput) {\r\n        \r\n        console.log(formInput)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n        <form\r\n        onSubmit={this.props.handleSubmit(this.onSubmit)} //handleSubmit is one of the redux-form propertiess\r\n         className=\"ui form\">\r\n            <Field name=\"title\" component={this.renderInput} label=\"Enter Title\" />\r\n            <Field name=\"description\" component={this.renderInput} label=\"Enter Description\" />\r\n            <button className=\"ui button primary\">Submit</button>\r\n        </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst validate = (formValues) => {\r\n    console.log(formValues);\r\n    const errors = {};\r\n\r\n    if(!formValues.title) {\r\n        errors.title = \"you must enter a title\";\r\n    }\r\n\r\n    if(!formValues.description) {\r\n        errors.description = \"you must enter a description\";\r\n    }\r\n\r\n    return errors;\r\n\r\n    \r\n} \r\n\r\n\r\nexport default reduxForm({\r\n    form: 'streamCreate',\r\n    validate: validate\r\n})(StreamCreate);"]},"metadata":{},"sourceType":"module"}