{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport streams from '../apis/streams';\nimport history from '../history';\nexport var signIn = function signIn(userId) {\n  return {\n    type: 'SIGN_IN',\n    payload: userId\n  };\n};\nexport var signOut = function signOut() {\n  return {\n    type: 'SIGN_OUT'\n  };\n};\nexport var createStream = function createStream(formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var userId, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                userId = getState().auth.userId;\n                _context.next = 3;\n                return streams.post('/streams', _objectSpread({}, formValues, {\n                  userId: userId\n                }));\n\n              case 3:\n                response = _context.sent;\n                dispatch({\n                  type: 'CREATE_STREAM',\n                  payload: response.data\n                }); //Programmatic navigation to get the user back to the root route.\n\n                history.push('/');\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; //Multiple records with GET\n\nexport var fetchStreams = function fetchStreams() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return streams.get('/streams');\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: 'FETCH_STREAMS',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; //Single record with GET\n\nexport var fetchStream = function fetchStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return streams.get(\"/streams/\".concat(id));\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: 'FETCH_STREAM',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}; //Update record with PUT\n\nexport var editStream = function editStream(id, formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return streams.put(\"/streams/\".concat(id), formValues);\n\n              case 2:\n                response = _context4.sent;\n                dispatch({\n                  type: 'EDIT_STREAM',\n                  payload: response.data\n                });\n                history.push('/');\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x5) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}; //Delete record with DELETE\n\nexport var deleteStream = function deleteStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return streams.delete(\"/streams/\".concat(id));\n\n              case 2:\n                dispatch({\n                  type: 'DELETE_STREAM',\n                  payload: id\n                });\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x6) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["D:\\Mini Projects\\streams\\channel\\src\\actions\\index.js"],"names":["streams","history","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","post","response","data","push","fetchStreams","get","fetchStream","id","editStream","put","deleteStream","delete"],"mappings":"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","sourcesContent":["import streams from '../apis/streams';\r\nimport history from '../history';\r\n\r\nexport const signIn = (userId) => {\r\n    return {\r\n        type: 'SIGN_IN',\r\n        payload: userId\r\n    };\r\n};\r\n\r\nexport const signOut = () => {\r\n    return {\r\n        type: 'SIGN_OUT'\r\n    };\r\n};\r\n\r\nexport const createStream = (formValues) => {\r\n    return async (dispatch, getState) => {\r\n        const { userId } = getState().auth;\r\n        const response = await streams.post('/streams', {...formValues, userId});\r\n\r\n        dispatch({type: 'CREATE_STREAM' , payload: response.data})\r\n        //Programmatic navigation to get the user back to the root route.\r\n        history.push('/');\r\n    } \r\n}\r\n\r\n//Multiple records with GET\r\nexport const fetchStreams = () => {\r\n    return async (dispatch) => {\r\n        const response = await streams.get('/streams');\r\n        \r\n        dispatch({type: 'FETCH_STREAMS', payload: response.data});\r\n    }\r\n}\r\n\r\n//Single record with GET\r\nexport const fetchStream = (id) => {\r\n    return async (dispatch) => {\r\n        const response = await streams.get(`/streams/${id}`);\r\n        \r\n        dispatch({type: 'FETCH_STREAM', payload: response.data});\r\n    }\r\n}\r\n\r\n//Update record with PUT\r\nexport const editStream = (id, formValues) => {\r\n    return async (dispatch) => {\r\n        const response = await streams.put(`/streams/${id}`, formValues);\r\n        \r\n        dispatch({type: 'EDIT_STREAM', payload: response.data});\r\n\r\n        history.push('/');\r\n    }\r\n}\r\n\r\n//Delete record with DELETE\r\nexport const deleteStream = (id) => {\r\n    return async (dispatch) => {\r\n        await streams.delete(`/streams/${id}`);\r\n        \r\n        dispatch({type: 'DELETE_STREAM', payload: id});\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}