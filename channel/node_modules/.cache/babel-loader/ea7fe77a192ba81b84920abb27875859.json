{"ast":null,"code":"import _classCallCheck from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\src\\\\components\\\\streams\\\\StreamShow.js\";\nimport React from \"react\";\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nvar StreamShow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamShow, _React$Component);\n\n  function StreamShow(props) {\n    var _this;\n\n    _classCallCheck(this, StreamShow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreamShow).call(this, props));\n    _this.videoRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(StreamShow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var id = this.props.match.params.id;\n      this.props.fetchStream(id);\n      this.buildPlayer();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.buildPlayer();\n    }\n  }, {\n    key: \"buildPlayer\",\n    value: function buildPlayer() {\n      if (this.player || !this.props.stream) {\n        return;\n      }\n\n      var id = this.props.match.params.id;\n      this.player = flv.createPlayer({\n        type: 'flv',\n        url: \"http://localhost:8000/live/\".concat(id, \".flv\")\n      });\n      this.player.attachMediaElement(this.videoRef.current);\n      this.player.load();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.stream) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      var _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%'\n        },\n        controls: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, title), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, description));\n    }\n  }]);\n\n  return StreamShow;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream: fetchStream\n})(StreamShow);","map":{"version":3,"sources":["D:\\Mini Projects\\streams\\channel\\src\\components\\streams\\StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","props","videoRef","createRef","id","match","params","buildPlayer","player","stream","createPlayer","type","url","attachMediaElement","current","load","title","description","width","Component","mapStateToProps","state","ownProps","streams"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,QAA0B,eAA1B;;IAEMC,U;;;;;AAEF,sBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,oFAAMA,KAAN;AACI,UAAKC,QAAL,GAAgBN,KAAK,CAACO,SAAN,EAAhB;AAFU;AAGjB;;;;wCAEiB;AAAA,UACRC,EADQ,GACF,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MADf,CACRF,EADQ;AAEf,WAAKH,KAAL,CAAWF,WAAX,CAAuBK,EAAvB;AACA,WAAKG,WAAL;AACH;;;yCAEmB;AAChB,WAAKA,WAAL;AACH;;;kCAEY;AACT,UAAG,KAAKC,MAAL,IAAe,CAAC,KAAKP,KAAL,CAAWQ,MAA9B,EAAqC;AACjC;AACH;;AAHQ,UAIFL,EAJE,GAII,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MAJrB,CAIFF,EAJE;AAKT,WAAKI,MAAL,GAAeX,GAAG,CAACa,YAAJ,CAAiB;AAC3BC,QAAAA,IAAI,EAAC,KADsB;AAE3BC,QAAAA,GAAG,uCAA+BR,EAA/B;AAFwB,OAAjB,CAAf;AAIC,WAAKI,MAAL,CAAYK,kBAAZ,CAA+B,KAAKX,QAAL,CAAcY,OAA7C;AACA,WAAKN,MAAL,CAAYO,IAAZ;AACJ;;;6BAES;AACL,UAAG,CAAC,KAAKd,KAAL,CAAWQ,MAAf,EAAsB;AAClB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACH;;AAHI,+BAIwB,KAAKR,KAAL,CAAWQ,MAJnC;AAAA,UAIEO,KAJF,sBAIEA,KAJF;AAAA,UAISC,WAJT,sBAISA,WAJT;AAML,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,GAAG,EAAE,KAAKf,QAAjB;AAA2B,QAAA,KAAK,EAAE;AAACgB,UAAAA,KAAK,EAAC;AAAP,SAAlC;AAAkD,QAAA,QAAQ,EAAE,IAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,KAAL,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKC,WAAL,CAHJ,CADJ;AAOH;;;;EA3CoBrB,KAAK,CAACuB,S;;AA8C/B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAoB;AACxC,SAAO;AAACb,IAAAA,MAAM,EAACY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACjB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAR,GAAP;AACH,CAFD;;AAIA,eAAeN,OAAO,CAACsB,eAAD,EAAkB;AAACrB,EAAAA,WAAW,EAAXA;AAAD,CAAlB,CAAP,CAAyCC,UAAzC,CAAf","sourcesContent":["import React from \"react\";\r\nimport flv from 'flv.js';\r\nimport {connect} from 'react-redux';\r\nimport {fetchStream} from '../../actions';\r\n\r\nclass StreamShow extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n            this.videoRef = React.createRef();\r\n    }\r\n    \r\n   componentDidMount(){\r\n       const {id} = this.props.match.params;\r\n       this.props.fetchStream(id);\r\n       this.buildPlayer(); \r\n   } \r\n\r\n   componentDidUpdate(){\r\n       this.buildPlayer();\r\n   }\r\n\r\n   buildPlayer(){\r\n       if(this.player || !this.props.stream){\r\n           return;\r\n       }\r\n       const {id} = this.props.match.params;\r\n       this.player =  flv.createPlayer({\r\n            type:'flv',\r\n            url:`http://localhost:8000/live/${id}.flv`\r\n        });\r\n        this.player.attachMediaElement(this.videoRef.current);\r\n        this.player.load();\r\n   }\r\n\r\n    render() {\r\n        if(!this.props.stream){\r\n            return <div>Loading...</div>\r\n        }\r\n        const {title, description} = this.props.stream;\r\n\r\n        return (\r\n            <div>\r\n                <video ref={this.videoRef} style={{width:'100%'}} controls={true} />\r\n                <h1>{title}</h1>\r\n                <h3>{description}</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) =>{\r\n    return {stream:state.streams[ownProps.match.params.id]};\r\n}\r\n\r\nexport default connect(mapStateToProps, {fetchStream}) (StreamShow);"]},"metadata":{},"sourceType":"module"}