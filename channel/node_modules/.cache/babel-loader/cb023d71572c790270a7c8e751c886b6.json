{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Mini Projects\\\\streams\\\\channel\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport streams from '../apis/streams';\nexport var signIn = function signIn(userId) {\n  return {\n    type: 'SIGN_IN',\n    payload: userId\n  };\n};\nexport var signOut = function signOut() {\n  return {\n    type: 'SIGN_OUT'\n  };\n};\nexport var createStream = function createStream(formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return streams.post('/streams', formValues);\n\n              case 2:\n                response = _context.sent;\n                dispatch({\n                  type: 'CREATE_STREAM',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; //Multiple records with GET\n\nexport var fetchSteams = function fetchSteams() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return streams.get('/streams');\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: 'FETCH_STREAMS',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; //Single record with GET\n\nexport var fetchSteam = function fetchSteam() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return streams.get(\"/streams/\".concat(id));\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: 'FETCH_STREAM',\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["D:\\Mini Projects\\streams\\channel\\src\\actions\\index.js"],"names":["streams","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","post","response","data","fetchSteams","get","fetchSteam","id"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,iBAApB;AAEA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD,EAAY;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAE,SADH;AAEHC,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,IAAMG,OAAO,GAAG,SAAVA,OAAU,GAAM;AACzB,SAAO;AACHF,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,UAAD,EAAgB;AACxC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBR,OAAO,CAACS,IAAR,CAAa,UAAb,EAAyBF,UAAzB,CADpB;;AAAA;AACGG,gBAAAA,QADH;AAGHF,gBAAAA,QAAQ,CAAC;AAACL,kBAAAA,IAAI,EAAE,eAAP;AAAyBC,kBAAAA,OAAO,EAAEM,QAAQ,CAACC;AAA3C,iBAAD,CAAR;;AAHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKH,CANM,C,CAQP;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAOJ,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBR,OAAO,CAACa,GAAR,CAAY,UAAZ,CADpB;;AAAA;AACGH,gBAAAA,QADH;AAGHF,gBAAAA,QAAQ,CAAC;AAACL,kBAAAA,IAAI,EAAE,eAAP;AAAwBC,kBAAAA,OAAO,EAAEM,QAAQ,CAACC;AAA1C,iBAAD,CAAR;;AAHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKH,CANM,C,CAQP;;AACA,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAON,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBR,OAAO,CAACa,GAAR,oBAAwBE,EAAxB,EADpB;;AAAA;AACGL,gBAAAA,QADH;AAGHF,gBAAAA,QAAQ,CAAC;AAACL,kBAAAA,IAAI,EAAE,cAAP;AAAuBC,kBAAAA,OAAO,EAAEM,QAAQ,CAACC;AAAzC,iBAAD,CAAR;;AAHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKH,CANM","sourcesContent":["import streams from '../apis/streams';\r\n\r\nexport const signIn = (userId) => {\r\n    return {\r\n        type: 'SIGN_IN',\r\n        payload: userId\r\n    };\r\n};\r\n\r\nexport const signOut = () => {\r\n    return {\r\n        type: 'SIGN_OUT'\r\n    };\r\n};\r\n\r\nexport const createStream = (formValues) => {\r\n    return async (dispatch) => {\r\n        const response = await streams.post('/streams', formValues);\r\n\r\n        dispatch({type: 'CREATE_STREAM' , payload: response.data})\r\n    } \r\n}\r\n\r\n//Multiple records with GET\r\nexport const fetchSteams = () => {\r\n    return async (dispatch) => {\r\n        const response = await streams.get('/streams');\r\n        \r\n        dispatch({type: 'FETCH_STREAMS', payload: response.data});\r\n    }\r\n}\r\n\r\n//Single record with GET\r\nexport const fetchSteam = () => {\r\n    return async (dispatch) => {\r\n        const response = await streams.get(`/streams/${id}`);\r\n        \r\n        dispatch({type: 'FETCH_STREAM', payload: response.data});\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}